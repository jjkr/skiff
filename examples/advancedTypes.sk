# Imports
import io
import * = string


# Function definition. Type annotation optional
fn foo(x: Int) = x + 3


# Compile time constant
const blockSize = 1024
# Compile time string
const magicStr: String = 'foobar';
# Ref, pointer and value types




class Array[Size: Int]

type Ref[T] {
  fn drop*() { gc_unref(); }
}

type Ptr[T] {
  fn drop*() { # do nothing }
}

class String {
  fn new*()
}

class ConstString {
  fn new() = @
  let @size
  fn @size() = @
}


fn `++`[S: String](lhs: S, rhs: S) {
  return lhs.append(rhs);
}



trait Exception {
  fn `$`() -> String;
}


trait Monad[T] {
  fn lift(t: T) -> Monad[T];
  fn bind(f: (...) -> Monad[U]) -> Monad[U];
}


##########################################
# Special Operators

# Unary $ is toString
let s: String = $5

fn `$`(i: mut Int) {
  new String(fn () {
    while i {
      yield i mod 10
      i /= 10
    }
  })
}


# Unary @ is ???????
# Type coercion? Member access?




##########################################
Pass by value???? pass by reference??

Dynamic Array -> value type (ptr, length)
Two types of reference -> static and gc
Copyable types? Int, Bool, Structs

fn addFive(x: Int) {
  x += 5;
}
let i = new Int(5)
addFive(i)
print(i) # Prints 5 or 10??

# Value type
struct Array[T] {
  let size: Int;
  let data: &mut T;
}

trait Enumerable[T] {
  fn ``
}

fn sum(a: Array[T]) {
  let mut acc = 0
  for x in a {
    acc += a
  }
  acc
}

## Async result
trait Async[T] {
}


## Error or Value type
trait Err[T] {
}


## Combination async and err type Async[Err[T]]
trait IO[T] {
}



fn readStd() -> IO[String] {
  # magic
}

fn print[S: String](


trait Map[Key, Value] {
  fn index(i: Int);
  fn find[K: Key](key: K) -> Err[Value];
}


trait Copy {

}


class Int impl Copy {

}


class String {
  fn new() {
  }
  let base
}

# Template operator
template `++`[L: List[L]](lists: []L)

fn (x) = x

# Arrays
let stackArr: Array[Int, 3] = [1, 4, 8]
let heapArr: *Array[Int, 3] = new [1, 4, 8]

heapArr.append(7);

type Nil
let nil: Nil

#Tuple types
type Point = (Int, Int)

type Value[T] : T

let mut x = 8

trait Record[T] {
  def fn trivialCopy(): T
}

trait Moveable[T] {
  def fn move*(s: mut *T)
}

class Seq {
  let size = 0
}

class Int {
  fn trivialCopy*() {}
  fn clone*() {}
}

# Pass by value is move by default
fn passByValue(x: Int) {
}

# Pass by const reference. Can be either stack or GC allocated
fn passByReference(x: *Int) {
  x = 5 # Illegal
}

# Pass by mutable reference
fn passByMutReference(x: mut *Int) {
  x = 5 # Ok
}

# Sets
let s: Seq[Int] = @[1, 9, 2]

iterator fib() {
  if n < 2 = n
  var last, cur = 0, 1
  yield last
  yield cur
  loop {
    last, cur = cur, last + cur
    yield cur
  }
}

enum Color {
  red,
  blue,
  green
}

struct Point {
  let x*: Int
  let y*: Int
}
fn radius*(p: Point): Int = sqrt(p.x ** 2 + p.y ** 2)

interface Iterator[T] {
  def `++`*(): &Iterator[T]
  def `*`*(): &T
}

# Bounded integers
type UnderTen = Range[0..10]
let four: UnderTen = 4

object Range[R: Iterator] {
}

# Maps
type Table[Col] = Array[Col] # Table is an array of tuples
object HashMap[K, V] = {
  fn new*(table: Table[K, V]) {}
  let table : Table[K, V]
}
type Dict[T] = HashMap[String, T]
%{ ('', 2), ('4', 2) }

fn createAndAdd[T]() {
  let t = new T;
  t.add(4)
  return t
}

# Union types. Implemented as a tagged union at runtime
type Shape = Square | Circle

# Empty tuple and None are the same
type None = ()
# Value types
type Value[T] = T
# Maybe monad
type Maybe[T] = Some[T] | None


concept CanLoopOver[T] {
  for t in val(T) = ()
  for t in ref(T) = ()
}

let t = T()
let m = Maybe[T](t)

# Pattern matching
match(m) {
  Some[x] = x
  None = abort()
}

class Node {
  let value* = 3
  fn getValue*() {
  }
  let val = 3
}

fn lessThen[T](a, b) = a < b

fn sort[T](range: Iterable[T], compare?: (T, T)->Bool = lessThen) {
}

fn sortReverse(range) { sort(range, greaterThen) }

sortReverse(list) fn(a, b) = a > b
